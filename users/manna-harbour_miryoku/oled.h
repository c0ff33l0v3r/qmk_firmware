static const char PROGMEM nyan_cat[] = {0xfe, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfb, 0xf1, 0xf1, 0xf1, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xf8, 0xf8, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x0f, 0x0f, 0x0f, 0x9f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xf7, 0xe3, 0xf7, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xfd, 0xfd, 0xaa, 0x56, 0x56, 0xaa, 0x56, 0x56, 0xaa, 0x56, 0x02, 0xaa, 0x56, 0xaa, 0xaa, 0xf6, 0x1a, 0x1a, 0xd6, 0xda, 0xda, 0xb6, 0x6a, 0x6a, 0x56, 0xea, 0xc2, 0xd6, 0xfe, 0x01, 0x01, 0x7f, 0xbf, 0xbf, 0xdf, 0xde, 0xde, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                        0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x53, 0x53, 0x55, 0x49, 0x41, 0x57, 0x57, 0x17, 0x17, 0x00, 0xff, 0xff, 0xaa, 0x55, 0x55, 0xaa, 0x55, 0x55, 0xaa, 0x55, 0x00, 0xaa, 0x55, 0xaa, 0xaa, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x2f, 0x2f, 0x66, 0x7e, 0x7e, 0x7e, 0x3e, 0x6e, 0x6e, 0x7e, 0x2f, 0x2f, 0xe7, 0xff, 0xff, 0x78, 0x83, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xf7, 0xe3, 0xf7, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xe3, 0xe3, 0xf7,
                                        0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf5, 0xf1, 0xf1, 0xf5, 0xf4, 0xf4, 0xf1, 0xfb, 0xfb, 0xfa, 0xfb, 0xfb, 0xfa, 0xe3, 0xe2, 0xea, 0xeb, 0xe2, 0xe2, 0xfb, 0xfa, 0xfa, 0xf8, 0xfd, 0xfd, 0xf1, 0xf5, 0xf5, 0xf1, 0xfd, 0xfd, 0xfd, 0xf1, 0xf5, 0xf5, 0xf1, 0xfd, 0xfd, 0xfd, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

void render_layer(void) {
    oled_write_P(PSTR("Layer: "), false);
    switch (get_highest_layer(layer_state)) {
        case U_BASE:
            oled_write_P(PSTR("Default\n"), false);
            break;
        case U_EXTRA:
            oled_write_P(PSTR("EXTRA\n"), false);
            break;
        case U_TAP:
            oled_write_P(PSTR("TAP\n"), false);
            break;
        case U_BUTTON:
            oled_write_P(PSTR("BUTTON\n"), false);
            break;
        case U_NAV:
            oled_write_P(PSTR("NAV\n"), false);
            break;
        case U_MOUSE:
            oled_write_P(PSTR("MOUSE\n"), false);
            break;
        case U_MEDIA:
            oled_write_P(PSTR("MEDIA\n"), false);
            break;
        case U_NUM:
            oled_write_P(PSTR("NUM\n"), false);
            break;
        case U_SYM:
            oled_write_P(PSTR("SYM\n"), false);
            break;
        case U_FUN:
            oled_write_P(PSTR("FUN\n"), false);
            break;
        default:
            oled_write_ln_P(PSTR("Undefined"), false);
    }
}

#ifdef OLED_ENABLE
oled_rotation_t oled_init_user(oled_rotation_t rotation) {
    if (!is_keyboard_master()) return OLED_ROTATION_180;
    return rotation;
}

bool oled_task_user() {
    if (!is_keyboard_master()) {
        render_layer();
    } else {
        oled_write_raw_P(nyan_cat, sizeof(nyan_cat));
    }

    return false;
}

#endif